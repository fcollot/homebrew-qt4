diff --git a/src/sql/drivers/odbc/qsql_odbc.cpp b/src/sql/drivers/odbc/qsql_odbc.cpp
index 18897372c3..9858cfbb25 100644
--- a/src/sql/drivers/odbc/qsql_odbc.cpp
+++ b/src/sql/drivers/odbc/qsql_odbc.cpp
@@ -72,19 +72,25 @@ inline static QString fromSQLTCHAR(const QVarLengthArray<SQLTCHAR>& input, int s
     QString result;
 
     int realsize = qMin(size, input.size());
+    qDebug() << "realsize " << realsize;
     if(realsize > 0 && input[realsize-1] == 0)
         realsize--;
+    qDebug() << "realsize " << realsize;
     switch(sizeof(SQLTCHAR)) {
         case 1:
+            qDebug() << "1";
             result=QString::fromUtf8((const char *)input.constData(), realsize);
             break;
         case 2:
+            qDebug() << "2";
             result=QString::fromUtf16((const ushort *)input.constData(), realsize);
             break;
         case 4:
+            qDebug() << "4";
             result=QString::fromUcs4((const uint *)input.constData(), realsize);
             break;
         default:
+            qDebug() << "default";
             qCritical() << "sizeof(SQLTCHAR) is " << sizeof(SQLTCHAR) << "Don't know how to handle this";
     }
     return result;
@@ -201,6 +207,7 @@ void QODBCPrivate::updateStmtHandleState(const QSqlDriver *driver)
 
 static QString qWarnODBCHandle(int handleType, SQLHANDLE handle, int *nativeCode = 0)
 {
+    return "blah";
     SQLINTEGER nativeCode_ = 0;
     SQLSMALLINT msgLen = 0;
     SQLRETURN r = SQL_NO_DATA;
@@ -208,9 +215,10 @@ static QString qWarnODBCHandle(int handleType, SQLHANDLE handle, int *nativeCode
     QVarLengthArray<SQLTCHAR> description_(SQL_MAX_MESSAGE_LENGTH);
     QString result;
     int i = 1;
-
+    qDebug() << "------- " << description_.size();
     description_[0] = 0;
     do {
+        qDebug() << "A";
         r = SQLGetDiagRec(handleType,
                           handle,
                           i,
@@ -219,8 +227,10 @@ static QString qWarnODBCHandle(int handleType, SQLHANDLE handle, int *nativeCode
                           0,
                           0,
                           &msgLen);
+        qDebug() << "B" << msgLen;
         if ((r == SQL_SUCCESS || r == SQL_SUCCESS_WITH_INFO) && msgLen > 0)
             description_.resize(msgLen+1);
+        qDebug() << "------- resized to " << description_.size();
         r = SQLGetDiagRec(handleType,
                             handle,
                             i,
@@ -229,25 +239,39 @@ static QString qWarnODBCHandle(int handleType, SQLHANDLE handle, int *nativeCode
                             description_.data(),
                             description_.size(),
                             &msgLen);
+        qDebug() << "C" << msgLen;
         if (r == SQL_SUCCESS || r == SQL_SUCCESS_WITH_INFO) {
+            qDebug() << "D";
             if (nativeCode)
+            {
+                qDebug() << "D'";
                 *nativeCode = nativeCode_;
+            }
             QString tmpstore;
 #ifdef UNICODE
+            qDebug() << "------- UNICODE";
             tmpstore = fromSQLTCHAR(description_, msgLen);
 #else
+            qDebug() << "------- NOT UNICODE";
             tmpstore = QString::fromUtf8((const char*)description_.constData(), msgLen);
 #endif
             if(result != tmpstore) {
+                qDebug() << "E";
                 if(!result.isEmpty())
+                {
+                    qDebug() << "E'";
                     result += QLatin1Char(' ');
+                }
                 result += tmpstore;
             }
         } else if (r == SQL_ERROR || r == SQL_INVALID_HANDLE) {
+            qDebug() << "F";
             return result;
         }
         ++i;
+        return result;
     } while (r != SQL_NO_DATA);
+    qDebug() << "G";
     return result;
 }
 
